/**
 * generated by Xtext 2.12.0
 */
package com.opcoach.bugsy.xtext.tests;

import com.google.inject.Inject;
import com.opcoach.bugsy.xtext.bugsDsl.BugsDslPackage;
import com.opcoach.bugsy.xtext.bugsDsl.BugsModel;
import com.opcoach.bugsy.xtext.tests.BugsDslInjectorProvider;
import com.opcoach.bugsy.xtext.validation.BugsDslValidator;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(BugsDslInjectorProvider.class)
@SuppressWarnings("all")
public class BugsDslValidationTest {
  @Inject
  @Extension
  private ParseHelper<BugsModel> parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper validHelper;
  
  @Test
  public void testIssue12_DimFunctionOnlyInDataBlock1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("data {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("D <- dim(Z)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("} model { }");
      this.validHelper.assertNoErrors(this.parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testIssue12_DimFunctionOnlyInDataBlock2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("data {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("D <- dim(Z)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("model {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("for (i in 1:N) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("y[i] ~ dnorm(mu, tau)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      this.validHelper.assertNoErrors(this.parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testIssue12_DimFunctionOnlyInDataBlock3() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("data {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("D <- dim(Z)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("model {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("for (i in 1:N) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("y[i] <- dim()");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      this.validHelper.assertError(this.parseHelper.parse(_builder), BugsDslPackage.eINSTANCE.getExpression(), BugsDslValidator.CHECK_ARRAY_FUNCTION_ONLY_IN_DATA_BLOCK);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testIssue14_ValidIndexesInLoop1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for (i in 1:N) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("y[i] ~ dnorm(mu, tau)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      this.validHelper.assertNoErrors(this.parseHelper.parse(_builder));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testIssue14_InvalidIndexesInLoop1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for (i in 1:N) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("y[k] ~ dnorm(mu, tau)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      this.validHelper.assertError(this.parseHelper.parse(_builder), BugsDslPackage.eINSTANCE.getArrayRange(), BugsDslValidator.CHECK_INVALID_INDEX_IN_LOOP);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testIssue15_UniqueIdentifier() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(j in 1:M){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(i in 1:N){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a[j,i] ~ dnorm(mu,tau)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("tau ~ dgamma(0.01,0.01)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("mu ~ dnorm(0,1) ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("mu ~ dnorm(5,10)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      this.validHelper.assertWarning(this.parseHelper.parse(_builder), BugsDslPackage.eINSTANCE.getRelation(), BugsDslValidator.CHECK_UNIQUE_VARIABLE_NAME);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testIssue17_UniqueMode1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(j in 1:M){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(i in 1:N){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a[j,i,k] ~ dnorm(mu[j],taub)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("mu <- log(1 + 2)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      final BugsModel model = this.parseHelper.parse(_builder);
      this.validHelper.assertError(model, BugsDslPackage.eINSTANCE.getExpression(), BugsDslValidator.CHECK_VARIABLE_DIMENSION_COMPLIANCE);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testIssue17_UniqueMode2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(j in 1:M){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(i in 1:N){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a[j,i,k] ~ dnorm(mu[j,i],taub)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("mu[j] <- log(1 + 2)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      final BugsModel model = this.parseHelper.parse(_builder);
      this.validHelper.assertError(model, BugsDslPackage.eINSTANCE.getExpression(), BugsDslValidator.CHECK_VARIABLE_DIMENSION_COMPLIANCE);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
