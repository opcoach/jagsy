/*
 * generated by Xtext 2.12.0
 */
package com.opcoach.bugsy.xtext.tests

import com.google.inject.Inject
import com.opcoach.bugsy.xtext.bugsDsl.BugsModel
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(BugsDslInjectorProvider)
class BugsDslParsingTest {
	@Inject
	ParseHelper<BugsModel> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			model { 
				for ( ed in 1:N2 ) { }
			
			# Comment 1
				tutu <- dbeta ()
				test ~ dbern(3,NZ,2.0E-4)
				NZ <- dgen.gamma() 
				titi ~ dbern(0, 3, 2)
			    toto <- c( 0, 0.0 , 0.0E-4, tau) 
			    test ~ c( test)
			    afq <- dgen.gamma(afq)
			    afq ~ acos(afq,afq,tutu)
			    tutu <- dnorm(afq,tau)
			    for ( a3 in 0:N3 ) { 
			    	  # Must loop on this...
			    	  test2 ~ dpois()
			    	  test33 <- dgamma(1.0, 1.6E-34)
			    }
			    }
			    
			    
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	
	@Test
	def void testIssue2()
	{
		// mismatched input 'a' expected '}' 
		// See : https://github.com/opcoach/jagsy/issues/2
		val result = parseHelper.parse('''
		model{
		a ~ dnorm(1,1)
		}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
		@Test
	def void testIssue3()
	{
		// Density Function in deterministic definition 
		// See : https://github.com/opcoach/jagsy/issues/3
		// Assert.fail("Density Function in deterministic definition (Test to Be Fixed)");
		val result = parseHelper.parse('''
		model{
		ab <- dnorm(1,1)
		}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
		@Test
	def void testIssue4()
	{
		// Simple addition sign tagged as error
		// See : https://github.com/opcoach/jagsy/issues/4
		val result = parseHelper.parse('''
		model{
		ab <- (1+2)
		}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
		@Test
	def void testIssue5()
	{
		// Obligation to use parentheses in expression 
		// See : https://github.com/opcoach/jagsy/issues/5
		val result = parseHelper.parse('''
		model{
		ab <- ac
		}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	
	
		@Test
	def void testIssue7()
	{
		// Indexed Variables not working
		// See : https://github.com/opcoach/jagsy/issues/7
		val result = parseHelper.parse('''
		model{
		ab[1] <- (1)
		ab[2] <- (1)
		}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	
	@Test
	def void testIssue8()
	{
		// maximum limit of the definition of a range of indices tagged as error
		// See : https://github.com/opcoach/jagsy/issues/8
		val result = parseHelper.parse('''
		model{
		for(ib in 1:3){
		}
		}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void testIssue9()
	{
		// See : https://github.com/opcoach/jagsy/issues/9
		val result = parseHelper.parse('''
			model{
			ab <- exp(3mu)
			mu <- 5
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
}
