grammar com.opcoach.bugsy.xtext.BugsDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate bugsDsl "http://www.opcoach.com/bugsy/xtext/BugsDsl"

BugsModel:
	{BugsModel}
	('data' '{'
	   data+=Instruction*
	   '}')?
	'model' '{'
	instructions+=Instruction*
	'}';

@ Override terminal SL_COMMENT:
	'#' !('\n' | '\r')* ('\r'? '\n')?;
@ Override terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')*;

	//.................................
// Starting grammar definition 
//.................................
Instruction:
	For | Relation;

For:
	{For} 'for' '(' variable=ID 'in' range=ForRange ')' '{' instructions+=Instruction* '}';

Numeric:
	INT | Float;

Index:
	INT | ID;
	
	// For Index are used to declare an index on an array or on a function of on array. 
	// For instance :    V or length(V)
	// And these values can be combined in low and high value in the for loop
ForIndex :  (function=IntOperator '(' value=Index  ')' ) | value=Index;

 // ForRange is used to declare low and high range in a For loop
ForRange : low=ForIndex ':' high=ForIndex;

 // ArrayRange is used to declare low and optional high range in a relation
ArrayRange : low=Index (':' high=Index)?;

Float returns ecore::EFloat:
	INT '.' INT ('E' ('+' | '-') INT)?;

Value:
	{Value} value=Numeric | id=ArrayID;

ArrayID:
	name=ID ('[' indexes+=ArrayRange (',' (indexes+=ArrayRange))* ']')?;

Relation:
	StochasticRelation | DeterministicRelation;

StochasticRelation:
	{StochasticRelation} name=ArrayID '~' distrib=DensityOperator ('()' | '(' ((params+=Expression) (',' (params+=Expression))*)
	')')?;

DeterministicRelation:
	{DeterministicRelation} name=ArrayID ('<-' | '=') (=> expressions+=Expression);

Operator:
	'+' | '-' | '*' | '/';

Function:
	operation=FunctionOperator ('()' | '(' (=> (params+=Expression) (',' (params+=Expression))* ')')?);

// An array function is defined to use the ArrayOperator (only in data block). 
ArrayFunction:
	operation=ArrayOperator ('()' | '(' (=> (params+=Expression) (',' (params+=Expression))* ')')?);


Distribution:
	distrib=DistributionOperator ('()' | '(' (=> (params+=Expression) (',' (params+=Expression))* ')')?);

Expression:
	TerminalExpression ({Expression.left=current} op=Operator
	right=TerminalExpression)*;

  // Terminal expressions are used both in model and data, but for model, the validation will check that no arrayFunctions are used 
TerminalExpression returns Expression:
	'(' Expression ')' | (value=Value) | (function=Function) | (distribution=Distribution) | (arrayFunction = ArrayFunction);

enum DistributionOperator:
	dbern='dbern' | dbin='dbin' | dchisqr='dchisqr' | ddexp='ddexp' | dexp='dexp' | df='df' |
	dgengamm='dgen.gamma' | dhyper='dhyper' | dlogis='dlogis' | dlnorm='dlnorm' | dnegbin='dnegbin' | dnchisqr='dnchisqr'
	| dpar='dpar' | dpois='dpois' | dt='dt';

enum DensityOperator:
	dnorm='dnorm' | dunif='dunif' | dbeta='dbeta' | dgamma='dgamma' | dweib = 'dweib' | weibul = 'weibul' ;

enum FunctionOperator: acos='acos' | acosh='acosh' | asin='asin' | asinh='asinh' | atan='atan' | log='log' | ep='exp' | c='c' | mean='mean' |
	sqrt='sqrt' | length = 'length' | inverse = 'inverse' | sort = 'sort';
	
/** Define the specific intoperator when it is used in for indexes */
enum IntOperator : length = 'length' ;  
	
// Isolate the dim operator that can be used only in the data block 
enum ArrayOperator : dim = 'dim';


