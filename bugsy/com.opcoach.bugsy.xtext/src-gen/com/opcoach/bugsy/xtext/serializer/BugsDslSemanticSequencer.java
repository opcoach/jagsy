/*
 * generated by Xtext 2.12.0
 */
package com.opcoach.bugsy.xtext.serializer;

import com.google.inject.Inject;
import com.opcoach.bugsy.xtext.bugsDsl.ArrayID;
import com.opcoach.bugsy.xtext.bugsDsl.BugsDslPackage;
import com.opcoach.bugsy.xtext.bugsDsl.BugsModel;
import com.opcoach.bugsy.xtext.bugsDsl.DeterministicRelation;
import com.opcoach.bugsy.xtext.bugsDsl.Expression;
import com.opcoach.bugsy.xtext.bugsDsl.For;
import com.opcoach.bugsy.xtext.bugsDsl.StochasticRelation;
import com.opcoach.bugsy.xtext.bugsDsl.Value;
import com.opcoach.bugsy.xtext.services.BugsDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class BugsDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BugsDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BugsDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BugsDslPackage.ARRAY_ID:
				sequence_ArrayID(context, (ArrayID) semanticObject); 
				return; 
			case BugsDslPackage.BUGS_MODEL:
				sequence_BugsModel(context, (BugsModel) semanticObject); 
				return; 
			case BugsDslPackage.DETERMINISTIC_RELATION:
				sequence_DeterministicRelation(context, (DeterministicRelation) semanticObject); 
				return; 
			case BugsDslPackage.EXPRESSION:
				sequence_Expression_TerminalExpression(context, (Expression) semanticObject); 
				return; 
			case BugsDslPackage.FOR:
				sequence_For(context, (For) semanticObject); 
				return; 
			case BugsDslPackage.STOCHASTIC_RELATION:
				sequence_StochasticRelation(context, (StochasticRelation) semanticObject); 
				return; 
			case BugsDslPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArrayID returns ArrayID
	 *
	 * Constraint:
	 *     (name=ID index=ID?)
	 */
	protected void sequence_ArrayID(ISerializationContext context, ArrayID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BugsModel returns BugsModel
	 *
	 * Constraint:
	 *     instructions+=Instruction*
	 */
	protected void sequence_BugsModel(ISerializationContext context, BugsModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns DeterministicRelation
	 *     Relation returns DeterministicRelation
	 *     DeterministicRelation returns DeterministicRelation
	 *
	 * Constraint:
	 *     (name=ArrayID (expressions+=Expression | ((distrib=Distribution | function=Function)* (params+=Expression params+=Expression*)?))?)
	 */
	protected void sequence_DeterministicRelation(ISerializationContext context, DeterministicRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *     Expression.Expression_1_0 returns Expression
	 *     TerminalExpression returns Expression
	 *
	 * Constraint:
	 *     ((left=Expression_Expression_1_0 op=Operator right=TerminalExpression) | value=Value)
	 */
	protected void sequence_Expression_TerminalExpression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns For
	 *     For returns For
	 *
	 * Constraint:
	 *     (variable=ID low=INT high=ID contents+=Instruction*)
	 */
	protected void sequence_For(ISerializationContext context, For semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns StochasticRelation
	 *     Relation returns StochasticRelation
	 *     StochasticRelation returns StochasticRelation
	 *
	 * Constraint:
	 *     (name=ArrayID distrib=Density (params+=Expression params+=Expression*)?)
	 */
	protected void sequence_StochasticRelation(ISerializationContext context, StochasticRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     (value=Numeric | id=ArrayID)
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
