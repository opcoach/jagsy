/*
 * generated by Xtext 2.12.0
 */
package com.opcoach.bugsy.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BugsDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BugsModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.BugsModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBugsModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDataKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDataAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDataInstructionParserRuleCall_1_2_0 = (RuleCall)cDataAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cModelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInstructionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_0 = (RuleCall)cInstructionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BugsModel:
		//	{BugsModel} ('data' '{'
		//	data+=Instruction*
		//	'}')?
		//	'model' '{'
		//	instructions+=Instruction*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BugsModel} ('data' '{' data+=Instruction* '}')? 'model' '{' instructions+=Instruction* '}'
		public Group getGroup() { return cGroup; }
		
		//{BugsModel}
		public Action getBugsModelAction_0() { return cBugsModelAction_0; }
		
		//('data' '{' data+=Instruction* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'data'
		public Keyword getDataKeyword_1_0() { return cDataKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//data+=Instruction*
		public Assignment getDataAssignment_1_2() { return cDataAssignment_1_2; }
		
		//Instruction
		public RuleCall getDataInstructionParserRuleCall_1_2_0() { return cDataInstructionParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//'model'
		public Keyword getModelKeyword_2() { return cModelKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_4() { return cInstructionsAssignment_4; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_0() { return cInstructionsInstructionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////.................................
		//// Starting grammar definition 
		////.................................
		//Instruction:
		//	For | Relation;
		@Override public ParserRule getRule() { return rule; }
		
		//For | Relation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//For
		public RuleCall getForParserRuleCall_0() { return cForParserRuleCall_0; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableIDTerminalRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRangeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRangeForRangeParserRuleCall_5_0 = (RuleCall)cRangeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cInstructionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInstructionsInstructionParserRuleCall_8_0 = (RuleCall)cInstructionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//For:
		//	{For} 'for' '(' variable=ID 'in' range=ForRange ')' '{' instructions+=Instruction* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{For} 'for' '(' variable=ID 'in' range=ForRange ')' '{' instructions+=Instruction* '}'
		public Group getGroup() { return cGroup; }
		
		//{For}
		public Action getForAction_0() { return cForAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//variable=ID
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_3_0() { return cVariableIDTerminalRuleCall_3_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//range=ForRange
		public Assignment getRangeAssignment_5() { return cRangeAssignment_5; }
		
		//ForRange
		public RuleCall getRangeForRangeParserRuleCall_5_0() { return cRangeForRangeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_8() { return cInstructionsAssignment_8; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_8_0() { return cInstructionsInstructionParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class NumericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Numeric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Numeric:
		//	INT | Float;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | Float
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//Float
		public RuleCall getFloatParserRuleCall_1() { return cFloatParserRuleCall_1; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Index");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Index:
		//	INT | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ForIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.ForIndex");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFunctionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFunctionArrayFunctionEnumRuleCall_0_0_0 = (RuleCall)cFunctionAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueIndexParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueIndexParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//// For Index are used to declare an index on an array or on a function of on array. 
		//// For instance :    V or length(V)
		//// And these values can be combined in low and high value in the for loop
		//ForIndex:
		//	function=ArrayFunction '(' value=Index ')' | value=Index;
		@Override public ParserRule getRule() { return rule; }
		
		//function=ArrayFunction '(' value=Index ')' | value=Index
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//function=ArrayFunction '(' value=Index ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//function=ArrayFunction
		public Assignment getFunctionAssignment_0_0() { return cFunctionAssignment_0_0; }
		
		//ArrayFunction
		public RuleCall getFunctionArrayFunctionEnumRuleCall_0_0_0() { return cFunctionArrayFunctionEnumRuleCall_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//value=Index
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//Index
		public RuleCall getValueIndexParserRuleCall_0_2_0() { return cValueIndexParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//value=Index
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Index
		public RuleCall getValueIndexParserRuleCall_1_0() { return cValueIndexParserRuleCall_1_0; }
	}
	public class ForRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.ForRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowForIndexParserRuleCall_0_0 = (RuleCall)cLowAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHighAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHighForIndexParserRuleCall_2_0 = (RuleCall)cHighAssignment_2.eContents().get(0);
		
		//// ForRange is used to declare low and high range in a For loop
		//ForRange:
		//	low=ForIndex ':' high=ForIndex;
		@Override public ParserRule getRule() { return rule; }
		
		//low=ForIndex ':' high=ForIndex
		public Group getGroup() { return cGroup; }
		
		//low=ForIndex
		public Assignment getLowAssignment_0() { return cLowAssignment_0; }
		
		//ForIndex
		public RuleCall getLowForIndexParserRuleCall_0_0() { return cLowForIndexParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//high=ForIndex
		public Assignment getHighAssignment_2() { return cHighAssignment_2; }
		
		//ForIndex
		public RuleCall getHighForIndexParserRuleCall_2_0() { return cHighForIndexParserRuleCall_2_0; }
	}
	public class ArrayRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.ArrayRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowIndexParserRuleCall_0_0 = (RuleCall)cLowAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cHighAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHighIndexParserRuleCall_1_1_0 = (RuleCall)cHighAssignment_1_1.eContents().get(0);
		
		//// ArrayRange is used to declare low and optional high range in a relation
		//ArrayRange:
		//	low=Index (':' high=Index)?;
		@Override public ParserRule getRule() { return rule; }
		
		//low=Index (':' high=Index)?
		public Group getGroup() { return cGroup; }
		
		//low=Index
		public Assignment getLowAssignment_0() { return cLowAssignment_0; }
		
		//Index
		public RuleCall getLowIndexParserRuleCall_0_0() { return cLowIndexParserRuleCall_0_0; }
		
		//(':' high=Index)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//high=Index
		public Assignment getHighAssignment_1_1() { return cHighAssignment_1_1; }
		
		//Index
		public RuleCall getHighIndexParserRuleCall_1_1_0() { return cHighIndexParserRuleCall_1_1_0; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//Float ecore::EFloat:
		//	INT '.' INT ('E' ('+' | '-') INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT ('E' ('+' | '-') INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//('E' ('+' | '-') INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'E'
		public Keyword getEKeyword_3_0() { return cEKeyword_3_0; }
		
		//'+' | '-'
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_1_0() { return cPlusSignKeyword_3_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_1_1() { return cHyphenMinusKeyword_3_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNumericParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdArrayIDParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//Value:
		//	{Value} value=Numeric | id=ArrayID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Value} value=Numeric | id=ArrayID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Value} value=Numeric
		public Group getGroup_0() { return cGroup_0; }
		
		//{Value}
		public Action getValueAction_0_0() { return cValueAction_0_0; }
		
		//value=Numeric
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//Numeric
		public RuleCall getValueNumericParserRuleCall_0_1_0() { return cValueNumericParserRuleCall_0_1_0; }
		
		//id=ArrayID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ArrayID
		public RuleCall getIdArrayIDParserRuleCall_1_0() { return cIdArrayIDParserRuleCall_1_0; }
	}
	public class ArrayIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.ArrayID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexesArrayRangeParserRuleCall_1_1_0 = (RuleCall)cIndexesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cIndexesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIndexesArrayRangeParserRuleCall_1_2_1_0 = (RuleCall)cIndexesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ArrayID:
		//	name=ID ('[' indexes+=ArrayRange (',' indexes+=ArrayRange)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('[' indexes+=ArrayRange (',' indexes+=ArrayRange)* ']')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('[' indexes+=ArrayRange (',' indexes+=ArrayRange)* ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//indexes+=ArrayRange
		public Assignment getIndexesAssignment_1_1() { return cIndexesAssignment_1_1; }
		
		//ArrayRange
		public RuleCall getIndexesArrayRangeParserRuleCall_1_1_0() { return cIndexesArrayRangeParserRuleCall_1_1_0; }
		
		//(',' indexes+=ArrayRange)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//indexes+=ArrayRange
		public Assignment getIndexesAssignment_1_2_1() { return cIndexesAssignment_1_2_1; }
		
		//ArrayRange
		public RuleCall getIndexesArrayRangeParserRuleCall_1_2_1_0() { return cIndexesArrayRangeParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStochasticRelationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeterministicRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Relation:
		//	StochasticRelation | DeterministicRelation;
		@Override public ParserRule getRule() { return rule; }
		
		//StochasticRelation | DeterministicRelation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StochasticRelation
		public RuleCall getStochasticRelationParserRuleCall_0() { return cStochasticRelationParserRuleCall_0; }
		
		//DeterministicRelation
		public RuleCall getDeterministicRelationParserRuleCall_1() { return cDeterministicRelationParserRuleCall_1; }
	}
	public class StochasticRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.StochasticRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStochasticRelationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameArrayIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTildeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDistribAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDistribDensityEnumRuleCall_3_0 = (RuleCall)cDistribAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Assignment cParamsAssignment_4_1_1_0 = (Assignment)cGroup_4_1_1.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_4_1_1_0_0 = (RuleCall)cParamsAssignment_4_1_1_0.eContents().get(0);
		private final Group cGroup_4_1_1_1 = (Group)cGroup_4_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_1_0 = (Keyword)cGroup_4_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1_1_1 = (Assignment)cGroup_4_1_1_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_4_1_1_1_1_0 = (RuleCall)cParamsAssignment_4_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		
		//StochasticRelation:
		//	{StochasticRelation} name=ArrayID '~' distrib=Density ('()' | '(' (params+=Expression (',' params+=Expression)*)
		//	')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StochasticRelation} name=ArrayID '~' distrib=Density ('()' | '(' (params+=Expression (',' params+=Expression)*) ')')?
		public Group getGroup() { return cGroup; }
		
		//{StochasticRelation}
		public Action getStochasticRelationAction_0() { return cStochasticRelationAction_0; }
		
		//name=ArrayID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ArrayID
		public RuleCall getNameArrayIDParserRuleCall_1_0() { return cNameArrayIDParserRuleCall_1_0; }
		
		//'~'
		public Keyword getTildeKeyword_2() { return cTildeKeyword_2; }
		
		//distrib=Density
		public Assignment getDistribAssignment_3() { return cDistribAssignment_3; }
		
		//Density
		public RuleCall getDistribDensityEnumRuleCall_3_0() { return cDistribDensityEnumRuleCall_3_0; }
		
		//('()' | '(' (params+=Expression (',' params+=Expression)*) ')')?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_4_0() { return cLeftParenthesisRightParenthesisKeyword_4_0; }
		
		//'(' (params+=Expression (',' params+=Expression)*) ')'
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1_0() { return cLeftParenthesisKeyword_4_1_0; }
		
		//params+=Expression (',' params+=Expression)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//params+=Expression
		public Assignment getParamsAssignment_4_1_1_0() { return cParamsAssignment_4_1_1_0; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_4_1_1_0_0() { return cParamsExpressionParserRuleCall_4_1_1_0_0; }
		
		//(',' params+=Expression)*
		public Group getGroup_4_1_1_1() { return cGroup_4_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_1_0() { return cCommaKeyword_4_1_1_1_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_4_1_1_1_1() { return cParamsAssignment_4_1_1_1_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_4_1_1_1_1_0() { return cParamsExpressionParserRuleCall_4_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_1_2() { return cRightParenthesisKeyword_4_1_2; }
	}
	public class DeterministicRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.DeterministicRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeterministicRelationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameArrayIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_0 = (RuleCall)cExpressionsAssignment_3.eContents().get(0);
		
		//DeterministicRelation:
		//	{DeterministicRelation} name=ArrayID ('<-' | '=') => expressions+=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{DeterministicRelation} name=ArrayID ('<-' | '=') => expressions+=Expression
		public Group getGroup() { return cGroup; }
		
		//{DeterministicRelation}
		public Action getDeterministicRelationAction_0() { return cDeterministicRelationAction_0; }
		
		//name=ArrayID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ArrayID
		public RuleCall getNameArrayIDParserRuleCall_1_0() { return cNameArrayIDParserRuleCall_1_0; }
		
		//'<-' | '='
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_2_0() { return cLessThanSignHyphenMinusKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//=> expressions+=Expression
		public Assignment getExpressionsAssignment_3() { return cExpressionsAssignment_3; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_0() { return cExpressionsExpressionParserRuleCall_3_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Operator:
		//	'+' | '-' | '*' | '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationFunctionOperatorEnumRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_0_0 = (Assignment)cGroup_1_1_1_0.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_1_1_1_0_0_0 = (RuleCall)cParamsAssignment_1_1_1_0_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_1_1_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		
		//Function:
		//	operation=FunctionOperator ('()' | '(' (=> (params+=Expression) (',' params+=Expression)* ')')?);
		@Override public ParserRule getRule() { return rule; }
		
		//operation=FunctionOperator ('()' | '(' (=> (params+=Expression) (',' params+=Expression)* ')')?)
		public Group getGroup() { return cGroup; }
		
		//operation=FunctionOperator
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//FunctionOperator
		public RuleCall getOperationFunctionOperatorEnumRuleCall_0_0() { return cOperationFunctionOperatorEnumRuleCall_0_0; }
		
		//'()' | '(' (=> (params+=Expression) (',' params+=Expression)* ')')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_0() { return cLeftParenthesisRightParenthesisKeyword_1_0; }
		
		//'(' (=> (params+=Expression) (',' params+=Expression)* ')')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(=> (params+=Expression) (',' params+=Expression)* ')')?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//=> (params+=Expression)
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_1_1_1_0_0() { return cParamsAssignment_1_1_1_0_0; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_1_1_0_0_0() { return cParamsExpressionParserRuleCall_1_1_1_0_0_0; }
		
		//(',' params+=Expression)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_1_1_1_1_1() { return cParamsAssignment_1_1_1_1_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_1_1_1_1_0() { return cParamsExpressionParserRuleCall_1_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_1_2() { return cRightParenthesisKeyword_1_1_1_2; }
	}
	public class DistributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Distribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDistribAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDistribDistributionOperatorEnumRuleCall_0_0 = (RuleCall)cDistribAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_0_0 = (Assignment)cGroup_1_1_1_0.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_1_1_1_0_0_0 = (RuleCall)cParamsAssignment_1_1_1_0_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_1_1_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		
		//Distribution:
		//	distrib=DistributionOperator ('()' | '(' (=> (params+=Expression) (',' params+=Expression)* ')')?);
		@Override public ParserRule getRule() { return rule; }
		
		//distrib=DistributionOperator ('()' | '(' (=> (params+=Expression) (',' params+=Expression)* ')')?)
		public Group getGroup() { return cGroup; }
		
		//distrib=DistributionOperator
		public Assignment getDistribAssignment_0() { return cDistribAssignment_0; }
		
		//DistributionOperator
		public RuleCall getDistribDistributionOperatorEnumRuleCall_0_0() { return cDistribDistributionOperatorEnumRuleCall_0_0; }
		
		//'()' | '(' (=> (params+=Expression) (',' params+=Expression)* ')')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_0() { return cLeftParenthesisRightParenthesisKeyword_1_0; }
		
		//'(' (=> (params+=Expression) (',' params+=Expression)* ')')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(=> (params+=Expression) (',' params+=Expression)* ')')?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//=> (params+=Expression)
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_1_1_1_0_0() { return cParamsAssignment_1_1_1_0_0; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_1_1_0_0_0() { return cParamsExpressionParserRuleCall_1_1_1_0_0_0; }
		
		//(',' params+=Expression)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_1_1_1_1_1() { return cParamsAssignment_1_1_1_1_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_1_1_1_1_0() { return cParamsExpressionParserRuleCall_1_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_1_2() { return cRightParenthesisKeyword_1_1_1_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperatorParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTerminalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	TerminalExpression ({Expression.left=current} op=Operator
		//	right=TerminalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminalExpression ({Expression.left=current} op=Operator right=TerminalExpression)*
		public Group getGroup() { return cGroup; }
		
		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }
		
		//({Expression.left=current} op=Operator right=TerminalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//op=Operator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_1_1_0() { return cOpOperatorParserRuleCall_1_1_0; }
		
		//right=TerminalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//TerminalExpression
		public RuleCall getRightTerminalExpressionParserRuleCall_1_2_0() { return cRightTerminalExpressionParserRuleCall_1_2_0; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cFunctionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionFunctionParserRuleCall_2_0 = (RuleCall)cFunctionAssignment_2.eContents().get(0);
		private final Assignment cDistributionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDistributionDistributionParserRuleCall_3_0 = (RuleCall)cDistributionAssignment_3.eContents().get(0);
		
		//TerminalExpression Expression:
		//	'(' Expression ')' | value=Value | function=Function | distribution=Distribution;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | value=Value | function=Function | distribution=Distribution
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_2() { return cFunctionAssignment_2; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_2_0() { return cFunctionFunctionParserRuleCall_2_0; }
		
		//distribution=Distribution
		public Assignment getDistributionAssignment_3() { return cDistributionAssignment_3; }
		
		//Distribution
		public RuleCall getDistributionDistributionParserRuleCall_3_0() { return cDistributionDistributionParserRuleCall_3_0; }
	}
	
	public class DistributionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.DistributionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDbernEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDbernDbernKeyword_0_0 = (Keyword)cDbernEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDbinEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDbinDbinKeyword_1_0 = (Keyword)cDbinEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDchisqrEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDchisqrDchisqrKeyword_2_0 = (Keyword)cDchisqrEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDdexpEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDdexpDdexpKeyword_3_0 = (Keyword)cDdexpEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDexpEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDexpDexpKeyword_4_0 = (Keyword)cDexpEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDfEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDfDfKeyword_5_0 = (Keyword)cDfEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDgengammEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDgengammDgenGammaKeyword_6_0 = (Keyword)cDgengammEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDhyperEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDhyperDhyperKeyword_7_0 = (Keyword)cDhyperEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDlogisEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDlogisDlogisKeyword_8_0 = (Keyword)cDlogisEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDlnormEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDlnormDlnormKeyword_9_0 = (Keyword)cDlnormEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cDnegbinEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cDnegbinDnegbinKeyword_10_0 = (Keyword)cDnegbinEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cDnchisqrEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cDnchisqrDnchisqrKeyword_11_0 = (Keyword)cDnchisqrEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cDparEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cDparDparKeyword_12_0 = (Keyword)cDparEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cDpoisEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cDpoisDpoisKeyword_13_0 = (Keyword)cDpoisEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cDtEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cDtDtKeyword_14_0 = (Keyword)cDtEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cDweibEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cDweibDweibKeyword_15_0 = (Keyword)cDweibEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum DistributionOperator:
		//	dbern | dbin | dchisqr | ddexp | dexp | df |
		//	dgengamm='dgen.gamma' | dhyper | dlogis | dlnorm | dnegbin | dnchisqr | dpar | dpois | dt | dweib;
		public EnumRule getRule() { return rule; }
		
		//dbern | dbin | dchisqr | ddexp | dexp | df | dgengamm='dgen.gamma' | dhyper | dlogis | dlnorm | dnegbin | dnchisqr |
		//dpar | dpois | dt | dweib
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//dbern
		public EnumLiteralDeclaration getDbernEnumLiteralDeclaration_0() { return cDbernEnumLiteralDeclaration_0; }
		
		//'dbern'
		public Keyword getDbernDbernKeyword_0_0() { return cDbernDbernKeyword_0_0; }
		
		//dbin
		public EnumLiteralDeclaration getDbinEnumLiteralDeclaration_1() { return cDbinEnumLiteralDeclaration_1; }
		
		//'dbin'
		public Keyword getDbinDbinKeyword_1_0() { return cDbinDbinKeyword_1_0; }
		
		//dchisqr
		public EnumLiteralDeclaration getDchisqrEnumLiteralDeclaration_2() { return cDchisqrEnumLiteralDeclaration_2; }
		
		//'dchisqr'
		public Keyword getDchisqrDchisqrKeyword_2_0() { return cDchisqrDchisqrKeyword_2_0; }
		
		//ddexp
		public EnumLiteralDeclaration getDdexpEnumLiteralDeclaration_3() { return cDdexpEnumLiteralDeclaration_3; }
		
		//'ddexp'
		public Keyword getDdexpDdexpKeyword_3_0() { return cDdexpDdexpKeyword_3_0; }
		
		//dexp
		public EnumLiteralDeclaration getDexpEnumLiteralDeclaration_4() { return cDexpEnumLiteralDeclaration_4; }
		
		//'dexp'
		public Keyword getDexpDexpKeyword_4_0() { return cDexpDexpKeyword_4_0; }
		
		//df
		public EnumLiteralDeclaration getDfEnumLiteralDeclaration_5() { return cDfEnumLiteralDeclaration_5; }
		
		//'df'
		public Keyword getDfDfKeyword_5_0() { return cDfDfKeyword_5_0; }
		
		//dgengamm='dgen.gamma'
		public EnumLiteralDeclaration getDgengammEnumLiteralDeclaration_6() { return cDgengammEnumLiteralDeclaration_6; }
		
		//'dgen.gamma'
		public Keyword getDgengammDgenGammaKeyword_6_0() { return cDgengammDgenGammaKeyword_6_0; }
		
		//dhyper
		public EnumLiteralDeclaration getDhyperEnumLiteralDeclaration_7() { return cDhyperEnumLiteralDeclaration_7; }
		
		//'dhyper'
		public Keyword getDhyperDhyperKeyword_7_0() { return cDhyperDhyperKeyword_7_0; }
		
		//dlogis
		public EnumLiteralDeclaration getDlogisEnumLiteralDeclaration_8() { return cDlogisEnumLiteralDeclaration_8; }
		
		//'dlogis'
		public Keyword getDlogisDlogisKeyword_8_0() { return cDlogisDlogisKeyword_8_0; }
		
		//dlnorm
		public EnumLiteralDeclaration getDlnormEnumLiteralDeclaration_9() { return cDlnormEnumLiteralDeclaration_9; }
		
		//'dlnorm'
		public Keyword getDlnormDlnormKeyword_9_0() { return cDlnormDlnormKeyword_9_0; }
		
		//dnegbin
		public EnumLiteralDeclaration getDnegbinEnumLiteralDeclaration_10() { return cDnegbinEnumLiteralDeclaration_10; }
		
		//'dnegbin'
		public Keyword getDnegbinDnegbinKeyword_10_0() { return cDnegbinDnegbinKeyword_10_0; }
		
		//dnchisqr
		public EnumLiteralDeclaration getDnchisqrEnumLiteralDeclaration_11() { return cDnchisqrEnumLiteralDeclaration_11; }
		
		//'dnchisqr'
		public Keyword getDnchisqrDnchisqrKeyword_11_0() { return cDnchisqrDnchisqrKeyword_11_0; }
		
		//dpar
		public EnumLiteralDeclaration getDparEnumLiteralDeclaration_12() { return cDparEnumLiteralDeclaration_12; }
		
		//'dpar'
		public Keyword getDparDparKeyword_12_0() { return cDparDparKeyword_12_0; }
		
		//dpois
		public EnumLiteralDeclaration getDpoisEnumLiteralDeclaration_13() { return cDpoisEnumLiteralDeclaration_13; }
		
		//'dpois'
		public Keyword getDpoisDpoisKeyword_13_0() { return cDpoisDpoisKeyword_13_0; }
		
		//dt
		public EnumLiteralDeclaration getDtEnumLiteralDeclaration_14() { return cDtEnumLiteralDeclaration_14; }
		
		//'dt'
		public Keyword getDtDtKeyword_14_0() { return cDtDtKeyword_14_0; }
		
		//dweib
		public EnumLiteralDeclaration getDweibEnumLiteralDeclaration_15() { return cDweibEnumLiteralDeclaration_15; }
		
		//'dweib'
		public Keyword getDweibDweibKeyword_15_0() { return cDweibDweibKeyword_15_0; }
	}
	public class DensityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.Density");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDnormEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDnormDnormKeyword_0_0 = (Keyword)cDnormEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDunifEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDunifDunifKeyword_1_0 = (Keyword)cDunifEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDbetaEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDbetaDbetaKeyword_2_0 = (Keyword)cDbetaEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDgammaEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDgammaDgammaKeyword_3_0 = (Keyword)cDgammaEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Density:
		//	dnorm | dunif | dbeta | dgamma;
		public EnumRule getRule() { return rule; }
		
		//dnorm | dunif | dbeta | dgamma
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//dnorm
		public EnumLiteralDeclaration getDnormEnumLiteralDeclaration_0() { return cDnormEnumLiteralDeclaration_0; }
		
		//'dnorm'
		public Keyword getDnormDnormKeyword_0_0() { return cDnormDnormKeyword_0_0; }
		
		//dunif
		public EnumLiteralDeclaration getDunifEnumLiteralDeclaration_1() { return cDunifEnumLiteralDeclaration_1; }
		
		//'dunif'
		public Keyword getDunifDunifKeyword_1_0() { return cDunifDunifKeyword_1_0; }
		
		//dbeta
		public EnumLiteralDeclaration getDbetaEnumLiteralDeclaration_2() { return cDbetaEnumLiteralDeclaration_2; }
		
		//'dbeta'
		public Keyword getDbetaDbetaKeyword_2_0() { return cDbetaDbetaKeyword_2_0; }
		
		//dgamma
		public EnumLiteralDeclaration getDgammaEnumLiteralDeclaration_3() { return cDgammaEnumLiteralDeclaration_3; }
		
		//'dgamma'
		public Keyword getDgammaDgammaKeyword_3_0() { return cDgammaDgammaKeyword_3_0; }
	}
	public class FunctionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.FunctionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAcosEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAcosAcosKeyword_0_0 = (Keyword)cAcosEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAcoshEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAcoshAcoshKeyword_1_0 = (Keyword)cAcoshEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAsinEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAsinAsinKeyword_2_0 = (Keyword)cAsinEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAsinhEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAsinhAsinhKeyword_3_0 = (Keyword)cAsinhEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAtanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAtanAtanKeyword_4_0 = (Keyword)cAtanEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLogEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLogLogKeyword_5_0 = (Keyword)cLogEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEpEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEpExpKeyword_6_0 = (Keyword)cEpEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCCKeyword_7_0 = (Keyword)cCEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cMeanEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cMeanMeanKeyword_8_0 = (Keyword)cMeanEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSqrtEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSqrtSqrtKeyword_9_0 = (Keyword)cSqrtEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum FunctionOperator:
		//	acos | acosh | asin | asinh | atan | log | ep='exp' | c | mean |
		//	sqrt;
		public EnumRule getRule() { return rule; }
		
		//acos | acosh | asin | asinh | atan | log | ep='exp' | c | mean | sqrt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//acos
		public EnumLiteralDeclaration getAcosEnumLiteralDeclaration_0() { return cAcosEnumLiteralDeclaration_0; }
		
		//'acos'
		public Keyword getAcosAcosKeyword_0_0() { return cAcosAcosKeyword_0_0; }
		
		//acosh
		public EnumLiteralDeclaration getAcoshEnumLiteralDeclaration_1() { return cAcoshEnumLiteralDeclaration_1; }
		
		//'acosh'
		public Keyword getAcoshAcoshKeyword_1_0() { return cAcoshAcoshKeyword_1_0; }
		
		//asin
		public EnumLiteralDeclaration getAsinEnumLiteralDeclaration_2() { return cAsinEnumLiteralDeclaration_2; }
		
		//'asin'
		public Keyword getAsinAsinKeyword_2_0() { return cAsinAsinKeyword_2_0; }
		
		//asinh
		public EnumLiteralDeclaration getAsinhEnumLiteralDeclaration_3() { return cAsinhEnumLiteralDeclaration_3; }
		
		//'asinh'
		public Keyword getAsinhAsinhKeyword_3_0() { return cAsinhAsinhKeyword_3_0; }
		
		//atan
		public EnumLiteralDeclaration getAtanEnumLiteralDeclaration_4() { return cAtanEnumLiteralDeclaration_4; }
		
		//'atan'
		public Keyword getAtanAtanKeyword_4_0() { return cAtanAtanKeyword_4_0; }
		
		//log
		public EnumLiteralDeclaration getLogEnumLiteralDeclaration_5() { return cLogEnumLiteralDeclaration_5; }
		
		//'log'
		public Keyword getLogLogKeyword_5_0() { return cLogLogKeyword_5_0; }
		
		//ep='exp'
		public EnumLiteralDeclaration getEpEnumLiteralDeclaration_6() { return cEpEnumLiteralDeclaration_6; }
		
		//'exp'
		public Keyword getEpExpKeyword_6_0() { return cEpExpKeyword_6_0; }
		
		//c
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_7() { return cCEnumLiteralDeclaration_7; }
		
		//'c'
		public Keyword getCCKeyword_7_0() { return cCCKeyword_7_0; }
		
		//mean
		public EnumLiteralDeclaration getMeanEnumLiteralDeclaration_8() { return cMeanEnumLiteralDeclaration_8; }
		
		//'mean'
		public Keyword getMeanMeanKeyword_8_0() { return cMeanMeanKeyword_8_0; }
		
		//sqrt
		public EnumLiteralDeclaration getSqrtEnumLiteralDeclaration_9() { return cSqrtEnumLiteralDeclaration_9; }
		
		//'sqrt'
		public Keyword getSqrtSqrtKeyword_9_0() { return cSqrtSqrtKeyword_9_0; }
	}
	public class ArrayFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.ArrayFunction");
		private final EnumLiteralDeclaration cLengthEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLengthLengthKeyword_0 = (Keyword)cLengthEnumLiteralDeclaration.eContents().get(0);
		
		//enum ArrayFunction:
		//	length;
		public EnumRule getRule() { return rule; }
		
		//length
		public EnumLiteralDeclaration getLengthEnumLiteralDeclaration() { return cLengthEnumLiteralDeclaration; }
		
		//'length'
		public Keyword getLengthLengthKeyword_0() { return cLengthLengthKeyword_0; }
	}
	
	private final BugsModelElements pBugsModel;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tID;
	private final InstructionElements pInstruction;
	private final ForElements pFor;
	private final NumericElements pNumeric;
	private final IndexElements pIndex;
	private final ForIndexElements pForIndex;
	private final ForRangeElements pForRange;
	private final ArrayRangeElements pArrayRange;
	private final FloatElements pFloat;
	private final ValueElements pValue;
	private final ArrayIDElements pArrayID;
	private final RelationElements pRelation;
	private final StochasticRelationElements pStochasticRelation;
	private final DeterministicRelationElements pDeterministicRelation;
	private final OperatorElements pOperator;
	private final FunctionElements pFunction;
	private final DistributionElements pDistribution;
	private final ExpressionElements pExpression;
	private final TerminalExpressionElements pTerminalExpression;
	private final DistributionOperatorElements eDistributionOperator;
	private final DensityElements eDensity;
	private final FunctionOperatorElements eFunctionOperator;
	private final ArrayFunctionElements eArrayFunction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BugsDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBugsModel = new BugsModelElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.SL_COMMENT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.opcoach.bugsy.xtext.BugsDsl.ID");
		this.pInstruction = new InstructionElements();
		this.pFor = new ForElements();
		this.pNumeric = new NumericElements();
		this.pIndex = new IndexElements();
		this.pForIndex = new ForIndexElements();
		this.pForRange = new ForRangeElements();
		this.pArrayRange = new ArrayRangeElements();
		this.pFloat = new FloatElements();
		this.pValue = new ValueElements();
		this.pArrayID = new ArrayIDElements();
		this.pRelation = new RelationElements();
		this.pStochasticRelation = new StochasticRelationElements();
		this.pDeterministicRelation = new DeterministicRelationElements();
		this.pOperator = new OperatorElements();
		this.pFunction = new FunctionElements();
		this.pDistribution = new DistributionElements();
		this.pExpression = new ExpressionElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.eDistributionOperator = new DistributionOperatorElements();
		this.eDensity = new DensityElements();
		this.eFunctionOperator = new FunctionOperatorElements();
		this.eArrayFunction = new ArrayFunctionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.opcoach.bugsy.xtext.BugsDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BugsModel:
	//	{BugsModel} ('data' '{'
	//	data+=Instruction*
	//	'}')?
	//	'model' '{'
	//	instructions+=Instruction*
	//	'}';
	public BugsModelElements getBugsModelAccess() {
		return pBugsModel;
	}
	
	public ParserRule getBugsModelRule() {
		return getBugsModelAccess().getRule();
	}
	
	//@ Override terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@ Override terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	////.................................
	//// Starting grammar definition 
	////.................................
	//Instruction:
	//	For | Relation;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//For:
	//	{For} 'for' '(' variable=ID 'in' range=ForRange ')' '{' instructions+=Instruction* '}';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//Numeric:
	//	INT | Float;
	public NumericElements getNumericAccess() {
		return pNumeric;
	}
	
	public ParserRule getNumericRule() {
		return getNumericAccess().getRule();
	}
	
	//Index:
	//	INT | ID;
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//// For Index are used to declare an index on an array or on a function of on array. 
	//// For instance :    V or length(V)
	//// And these values can be combined in low and high value in the for loop
	//ForIndex:
	//	function=ArrayFunction '(' value=Index ')' | value=Index;
	public ForIndexElements getForIndexAccess() {
		return pForIndex;
	}
	
	public ParserRule getForIndexRule() {
		return getForIndexAccess().getRule();
	}
	
	//// ForRange is used to declare low and high range in a For loop
	//ForRange:
	//	low=ForIndex ':' high=ForIndex;
	public ForRangeElements getForRangeAccess() {
		return pForRange;
	}
	
	public ParserRule getForRangeRule() {
		return getForRangeAccess().getRule();
	}
	
	//// ArrayRange is used to declare low and optional high range in a relation
	//ArrayRange:
	//	low=Index (':' high=Index)?;
	public ArrayRangeElements getArrayRangeAccess() {
		return pArrayRange;
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}
	
	//Float ecore::EFloat:
	//	INT '.' INT ('E' ('+' | '-') INT)?;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//Value:
	//	{Value} value=Numeric | id=ArrayID;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//ArrayID:
	//	name=ID ('[' indexes+=ArrayRange (',' indexes+=ArrayRange)* ']')?;
	public ArrayIDElements getArrayIDAccess() {
		return pArrayID;
	}
	
	public ParserRule getArrayIDRule() {
		return getArrayIDAccess().getRule();
	}
	
	//Relation:
	//	StochasticRelation | DeterministicRelation;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//StochasticRelation:
	//	{StochasticRelation} name=ArrayID '~' distrib=Density ('()' | '(' (params+=Expression (',' params+=Expression)*)
	//	')')?;
	public StochasticRelationElements getStochasticRelationAccess() {
		return pStochasticRelation;
	}
	
	public ParserRule getStochasticRelationRule() {
		return getStochasticRelationAccess().getRule();
	}
	
	//DeterministicRelation:
	//	{DeterministicRelation} name=ArrayID ('<-' | '=') => expressions+=Expression;
	public DeterministicRelationElements getDeterministicRelationAccess() {
		return pDeterministicRelation;
	}
	
	public ParserRule getDeterministicRelationRule() {
		return getDeterministicRelationAccess().getRule();
	}
	
	//Operator:
	//	'+' | '-' | '*' | '/';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Function:
	//	operation=FunctionOperator ('()' | '(' (=> (params+=Expression) (',' params+=Expression)* ')')?);
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Distribution:
	//	distrib=DistributionOperator ('()' | '(' (=> (params+=Expression) (',' params+=Expression)* ')')?);
	public DistributionElements getDistributionAccess() {
		return pDistribution;
	}
	
	public ParserRule getDistributionRule() {
		return getDistributionAccess().getRule();
	}
	
	//Expression:
	//	TerminalExpression ({Expression.left=current} op=Operator
	//	right=TerminalExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//TerminalExpression Expression:
	//	'(' Expression ')' | value=Value | function=Function | distribution=Distribution;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//enum DistributionOperator:
	//	dbern | dbin | dchisqr | ddexp | dexp | df |
	//	dgengamm='dgen.gamma' | dhyper | dlogis | dlnorm | dnegbin | dnchisqr | dpar | dpois | dt | dweib;
	public DistributionOperatorElements getDistributionOperatorAccess() {
		return eDistributionOperator;
	}
	
	public EnumRule getDistributionOperatorRule() {
		return getDistributionOperatorAccess().getRule();
	}
	
	//enum Density:
	//	dnorm | dunif | dbeta | dgamma;
	public DensityElements getDensityAccess() {
		return eDensity;
	}
	
	public EnumRule getDensityRule() {
		return getDensityAccess().getRule();
	}
	
	//enum FunctionOperator:
	//	acos | acosh | asin | asinh | atan | log | ep='exp' | c | mean |
	//	sqrt;
	public FunctionOperatorElements getFunctionOperatorAccess() {
		return eFunctionOperator;
	}
	
	public EnumRule getFunctionOperatorRule() {
		return getFunctionOperatorAccess().getRule();
	}
	
	//enum ArrayFunction:
	//	length;
	public ArrayFunctionElements getArrayFunctionAccess() {
		return eArrayFunction;
	}
	
	public EnumRule getArrayFunctionRule() {
		return getArrayFunctionAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
